# Monitoring The Progress of the COVID-19 Pandemic

## A Julia Data Analysis Tutorial
## By Daniel Lakeland
## Lakeland Applied Sciences LLC


As a mathematical modeler and data analyst many of my friends have
asked me questions about what is going on with the COVID pandemic. On
my blog I've posted some graphs as PDFs with updates every few weeks,
but it's more convenient to give my friends and family an executable
Jupyter notebook where they can update to the latest data any time
they want. Let's get started by grabbing the daily data for all states
from the [Covid Tracking Project](https://covidtracking.com/)

We'll use the
[Vegalite graphics library](https://vega.github.io/vega-lite/docs/)
this time with the
[@vlplot](https://www.queryverse.org/VegaLite.jl/stable/userguide/vlplotmacro/)
macro.

```julia
using Queryverse
```


```julia
usdata = "https://covidtracking.com/api/v1/states/daily.csv"


uspopurl = "https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/totals/co-est2019-alldata.csv"

statecodesurl ="https://www2.census.gov/geo/docs/reference/state.txt?#"

uspop = load(uspopurl) |> @filter(_.COUNTY == 0) |> @select(:STATE,:STNAME,:POPESTIMATE2019) |> DataFrame


statecodes = load(File(format"CSV",statecodesurl), delim='|') |> DataFrame



dat = DataFrame(load(usdata))


dat = join(dat,statecodes, on = :state => :STUSAB,kind=:left)

dat = join(dat,uspop, on = :STATE_NAME => :STNAME, kind=:left, makeunique=true)


display(first(dat,5))
display(first(uspop))


display(first(dat,5))
display(first(uspop))

```

# Understanding the Data

The Covid Tracking Project aggregates data from all the states on
various important measures. For the moment let's focus on daily
positive tests, the ratio of total tests to positive tests, the number
of hospitalized patients, and the number of deaths per day. 

Let's figure out which columns those correspond to:

```julia

println(names(dat))

using Dates

function convdate(d::Int)
    return(Date(div(d,10000),div(mod(d,10000),100),mod(d,100)));
end

dat2 = dat |> @mutate(thedate=convdate(_.date)) |> DataFrame

allstates = unique(dat.state);

```

Let's create a function that plots percentage positive, positive per
day, and deaths per day for a given state...

```julia

function plotstate(df,state)
    dfstate = df |> @filter(_.state == state) |> 
        @mutate(testpct=_.positiveIncrease/(_.totalTestResultsIncrease+.1)) |>
        @select(:thedate,:state,:testpct,:positiveIncrease,:deathIncrease)|>DataFrame

    testing = @vlplot(width=300,layer=[],title="Testing in $state") +
        @vlplot(:point,x=:thedate,y={:testpct,axis={title="Percentage Positive"}}) + 
        @vlplot(transform=[{loess=:testpct,on=:thedate}],
                mark=:line,x=:thedate,y=:testpct)
    
    cases = @vlplot(width=300,layer=[],title="Cases in $state") + 
        @vlplot(mark={:point,filled=true},
                x=:thedate,y={:positiveIncrease,axis={title="Cases Per Day"}})+
    @vlplot(transform=[{loess=:positiveIncrease,on=:thedate,bandwidth=.2}],
            mark=:line,x=:thedate,y=:positiveIncrease)
    
    deaths = @vlplot(width=300,layer=[],title="Deaths in $state") + 
        @vlplot(:point,x=:thedate,y={:deathIncrease,axis={title="Deaths Per Day"}}) + 
        @vlplot(transform=[{loess=:deathIncrease,on=:thedate,bandwidth=.2}],
                mark=:line,x=:thedate,y=:deathIncrease)
    
    return(dfstate |> hcat(testing,cases,deaths))
    
end

#test output
#plotstate(dat2,"CA")

```

# Plotting All The States:



```julia

for i in allstates
    display(plotstate(dat2,i))
end


```

# Hospitalization:

Hospitalization data is reported rather incompletely in the
covidtracking data. We'll filter out the missing values, and then
graph states for which it's available. Note that for Queryverse
@filter we must filter on isna rather than ismissing.

```julia


hdat = dat2 |> @filter(! isna(_.hospitalizedCurrently)) |> DataFrame
display(first(hdat,10))

for i in allstates

    hdat |> @filter(_.state == i) |> @mutate(hosppc = _.hospitalizedCurrently / _.POPESTIMATE2019 * 1e3) |> @vlplot(layer=[]) + @vlplot(:point, x=:thedate, y=:hosppc,title="$i Hospitalization/1000 people") + @vlplot(transform=[{loess=:hosppc,on=:thedate,bandwidth=.2}],mark=:line,x=:thedate,y=:hosppc) |> display

end

```



# Mortality Data:

Although the CDC in general doesn't have up to date mortality data
available, they have made an effort to create a variety of datasets
for COVID. They're required not to release too-specific
information. They can only do aggregated groups with more than 10
people aggregated. Obviously you'd probably like every day every
county, exactly how many people in each sex and age category
died... But this kind of data is not allowed as it quickly becomes
individually identifiable.

The most useful datasets are:

1. COVID-19 [Case Surveillance Public Use Data](https://catalog.data.gov/dataset/covid-19-case-surveillance-public-use-data)
   1. CSV at: https://data.cdc.gov/api/views/vbim-akqf/rows.csv?accessType=DOWNLOAD
2. [Provisional Death Counts by Sex,Age,State](https://catalog.data.gov/dataset/provisional-covid-19-death-counts-by-sex-age-and-state-fb69a)
   1. CSV at: https://data.cdc.gov/api/views/9bhg-hcku/rows.csv?accessType=DOWNLOAD
3. [By Place of Death and State](https://catalog.data.gov/dataset/provisional-covid-19-death-counts-by-place-of-death-and-state-936c6)
4. [By Week and State](https://catalog.data.gov/dataset/provisional-covid-19-death-counts-by-week-ending-date-and-state)
   1. CSV at: https://data.cdc.gov/api/views/r8kw-7aab/rows.csv?accessType=DOWNLOAD
5. [By Sex Age and Week](https://catalog.data.gov/dataset/provisional-covid-19-death-counts-by-sex-age-and-week)
   1. CSV at: https://data.cdc.gov/api/views/vsak-wrfu/rows.csv?accessType=DOWNLOAD
6. [Death counts by county](https://catalog.data.gov/dataset/provisional-covid-19-death-counts-in-the-united-states-by-county)
   1. CSV at: https://data.cdc.gov/api/views/kn79-hsxy/rows.csv?accessType=DOWNLOAD
7. [Weekly death counts by state and cause](https://catalog.data.gov/dataset/weekly-counts-of-deaths-by-state-and-select-causes-2019-2020)
   1. CSV at: https://data.cdc.gov/api/views/muzy-jte6/rows.csv?accessType=DOWNLOAD
8. 



```julia


using HTTP
function grabifsmallerolder(url,filename,size,time)
    s = stat(filename)
    if(s.size < size || s.mtime < time)
        chmod(filename,0o644)
        io = open(filename,"w")
        try r = HTTP.get(url,response_stream=io); catch err; 
            throw(err)
        finally 
            close(io)
        end
    end
end

covdeaths = "https://data.cdc.gov/api/views/9bhg-hcku/rows.csv?accessType=DOWNLOAD"
grabifsmallerolder(covdeaths,"covSexAgeState.csv",1e6,time()-3600*24);



```

It's useful to ask which age groups are losing the most expected life
years? To answer this we can use the life expectancy tables provided
by the CDC. To make this analysis simple, we'll use tables for the
whole population against the data for both sexes.



```julia;

covdf = DataFrame(load("covSexAgeState.csv"))

agedict = Dict("Under 1 year" => 0.5, "1-4 years" => 2.5, "5-14 years" => 10.0, "15-24 years" => 20.0,
               "25-34 years" => 30.0, "35-44 years" => 40.0, 
               "45-54 years" => 50.0, "55-64 years" => 60.0, "65-74 years" => 70.0 ,
               "75-84 years" => 80.0, "85 years and over" => 90.0, "All ages"=>nothing, "All Ages" => nothing)

rename!(covdf,[:date,:startwk,:endwk,:state,:sex,:agegrp,:coviddeaths,:totdeaths,:pneumdeaths,:pneumandcovdeaths,:infldeaths,:pnuminfcovdeaths,:footnote])

covdf.agenum  = map(x -> agedict[x],covdf.agegrp)


covallagedf = covdf[map(x -> x in ["All ages","All Ages"], covdf.agegrp ),:]

filter!(x -> ! (x in ["All ages","All Ages"]),covdf)

deathsplot = covdf |> @filter(_.state == "United States" && _.sex != "Unknown") |> 
( @vlplot(layer=[]) + 
  @vlplot(:point,x={"agenum:q",title="Age"},y= {"coviddeaths:q",scale={domain=[0,40000]}},
          color="sex:n",width=600,title="Total Coronavirus Deaths By Age") +
  @vlplot(:line,x="agenum:q",y="coviddeaths:q",color="sex:n"))

lifetable = "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/NVSR/68_07/Table01.xlsx"

grabifsmallerolder(lifetable,"alllife.xlsx",100,time()+3600*12);

ltd = DataFrame(load("alllife.xlsx","Table 1!A4:G104"))
rename!(ltd,[:agegrp,:qx,:nsurv,:ndie,:pylived,:pylivedabov,:expect])

ltd.age = 1:100

lyldf = DataFrame(covdf |> @filter(_.sex == "All" && _.agenum != nothing) |> 
                  @mutate(lyl = _.coviddeaths * ltd[Int(round(_.agenum +.1)),:expect]))



lylplot = lyldf |>@mutate(ltl=_.lyl/80)|> @vlplot(:bar,x={"agenum:q",title="Age"},y={"ltl:q",title="Nominal Lifetimes Lost"},width=600,
                                        title="Nominal Lifetimes Lost By Age (1 lifetime = 80 years)")
display([deathsplot; lylplot]);


```

The CDC Through Data.gov has made available a de-identified
individualized case database of COVID cases:

```julia

covidcases="https://data.cdc.gov/api/views/vbim-akqf/rows.csv?accessType=DOWNLOAD"

grabifsmallerolder(covidcases,"covidcasespub.csv",1000000,time()-3600*24);

covcasedf = DataFrame(load("covidcasespub.csv"))

```

Manipulating data is sometimes easier if you can use a well developed
language to manipulate it. Fortunately, the SQLite library is an
excellent tool for manipulating large datasets in a self-contained
database file, without all the complexity of a database management
system like Mariadb/MySQL or PostgreSQL. We can access SQLite from
Julia. It is somewhat slower than in R at the moment, but still fast
enough for our purposes. Hopefully in the future it will be even
better.

```julia

using SQLite

db = SQLite.DB("coviddb.db")

SQLite.drop!(db,"CovidCases";ifexists=true);
SQLite.load!(covcasedf,db,"CovidCases";ifnotexists=true);
```

Let's grab all deaths by day, aggregated by age group:

```julia
byagedeaths = DBInterface.execute(db,"select cdc_report_dt,count(*) as N,age_group,death_yn from CovidCases group by cdc_report_dt,age_group,death_yn") |> DataFrame

first(byagedeaths,10)

```

Now a graph that shows 40-50 year old death rates:


```julia

function plotdeaths(df,agegroup)
    df |> @filter(_.age_group == agegroup && _.death_yn == "Yes") |> 
        @vlplot(layer=[],title="US-wide Deaths per day (age $agegroup)",width=600) + 
        @vlplot(:point,x=:cdc_report_dt,y={:N,scale={domain=[0,1000]}},) + 
        @vlplot(:line,x=:cdc_report_dt,y=:N,transform=[{loess=:N, on=:cdc_report_dt,bandwidth=.2}])
end


plot40 = byagedeaths |> x->plotdeaths(x,"40 - 49 Years")
plot50 = byagedeaths |> x->plotdeaths(x,"50 - 59 Years")
plot60 = byagedeaths |> x->plotdeaths(x,"60 - 69 Years")
plot70 = byagedeaths |> x->plotdeaths(x,"70 - 79 Years")

map(display,[plot40,plot50,plot60,plot70]);

```
